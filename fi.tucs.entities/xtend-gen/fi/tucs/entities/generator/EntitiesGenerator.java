/**
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import fi.tucs.entities.entities.AssignmentStatement;
import fi.tucs.entities.entities.BasicType;
import fi.tucs.entities.entities.BoolConstant;
import fi.tucs.entities.entities.Entity;
import fi.tucs.entities.entities.EntityType;
import fi.tucs.entities.entities.Field;
import fi.tucs.entities.entities.FieldRef;
import fi.tucs.entities.entities.FieldType;
import fi.tucs.entities.entities.IntConstant;
import fi.tucs.entities.entities.PrintStatement;
import fi.tucs.entities.entities.Statement;
import fi.tucs.entities.entities.StringConstant;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class EntitiesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity e : _filter) {
      String _name = e.getName();
      String _plus = ("entities/" + _name);
      String _plus_1 = (_plus + ".java");
      fsa.generateFile(_plus_1, 
        this.compile(e));
    }
  }
  
  public CharSequence compile(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package entities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      Entity _superType = entity.getSuperType();
      boolean _notEquals = (!Objects.equal(_superType, null));
      if (_notEquals) {
        _builder.append("extends ");
        String _name_1 = entity.getSuperType().getName();
        _builder.append(_name_1);
        _builder.append(" ");
      }
    }
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Field> _fields = entity.getFields();
      for(final Field field : _fields) {
        _builder.append("\t");
        _builder.append("private ");
        CharSequence _compile = this.compile(field.getType());
        _builder.append(_compile, "\t");
        _builder.append(" ");
        String _name_2 = field.getName();
        _builder.append(_name_2, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Field> _fields_1 = entity.getFields();
      for(final Field field_1 : _fields_1) {
        _builder.append("\t");
        _builder.append("public ");
        CharSequence _compile_1 = this.compile(field_1.getType());
        _builder.append(_compile_1, "\t");
        _builder.append(" get");
        String _firstUpper = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper, "\t");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ");
        String _name_3 = field_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void set");
        String _firstUpper_1 = StringExtensions.toFirstUpper(field_1.getName());
        _builder.append(_firstUpper_1, "\t");
        _builder.append("(");
        CharSequence _compile_2 = this.compile(field_1.getType());
        _builder.append(_compile_2, "\t");
        _builder.append(" value) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.");
        String _name_4 = field_1.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(" = value;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_5 = entity.getName();
    _builder.append(_name_5, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Init();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void Init() {");
    _builder.newLine();
    {
      EList<Statement> _statements = entity.getStatements();
      for(final Statement statement : _statements) {
        _builder.append("\t\t");
        CharSequence _compile_3 = this.compile(statement);
        _builder.append(_compile_3, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final FieldType x) {
    return this.typeToString(x);
  }
  
  protected CharSequence _compile(final PrintStatement x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(");
    CharSequence _compile = this.compile(x.getExpr());
    _builder.append(_compile);
    _builder.append(");");
    return _builder;
  }
  
  protected CharSequence _compile(final AssignmentStatement x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.set");
    String _firstUpper = StringExtensions.toFirstUpper(x.getAssignee().getName());
    _builder.append(_firstUpper);
    _builder.append("(");
    CharSequence _compile = this.compile(x.getExpr());
    _builder.append(_compile);
    _builder.append(");");
    return _builder;
  }
  
  protected CharSequence _compile(final IntConstant x) {
    return Integer.valueOf(x.getValue()).toString();
  }
  
  protected CharSequence _compile(final StringConstant x) {
    String _value = x.getValue();
    String _plus = ("\"" + _value);
    return (_plus + "\"");
  }
  
  protected CharSequence _compile(final BoolConstant x) {
    String _switchResult = null;
    String _value = x.getValue();
    if (_value != null) {
      switch (_value) {
        case "on":
          _switchResult = "true";
          break;
        case "off":
          _switchResult = "false";
          break;
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _compile(final FieldRef x) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.get");
    String _firstUpper = StringExtensions.toFirstUpper(x.getField().getName());
    _builder.append(_firstUpper);
    _builder.append("()");
    return _builder;
  }
  
  protected CharSequence _compile(final FieldType fieldType) {
    return this.typeToString(fieldType);
  }
  
  protected String _typeToString(final BasicType type) {
    String _switchResult = null;
    String _typeName = type.getTypeName();
    if (_typeName != null) {
      switch (_typeName) {
        case "text":
          _switchResult = "String";
          break;
        case "number":
          _switchResult = "int";
          break;
        case "toggle":
          _switchResult = "boolean";
          break;
      }
    }
    return _switchResult;
  }
  
  protected String _typeToString(final EntityType type) {
    return type.getEntity().getName();
  }
  
  public CharSequence compile(final EObject x) {
    if (x instanceof AssignmentStatement) {
      return _compile((AssignmentStatement)x);
    } else if (x instanceof BoolConstant) {
      return _compile((BoolConstant)x);
    } else if (x instanceof FieldRef) {
      return _compile((FieldRef)x);
    } else if (x instanceof IntConstant) {
      return _compile((IntConstant)x);
    } else if (x instanceof PrintStatement) {
      return _compile((PrintStatement)x);
    } else if (x instanceof StringConstant) {
      return _compile((StringConstant)x);
    } else if (x instanceof FieldType) {
      return _compile((FieldType)x);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(x).toString());
    }
  }
  
  public String typeToString(final FieldType type) {
    if (type instanceof BasicType) {
      return _typeToString((BasicType)type);
    } else if (type instanceof EntityType) {
      return _typeToString((EntityType)type);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type).toString());
    }
  }
}
