/**
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.formatting2;

import com.google.inject.Inject;
import fi.tucs.entities.entities.EntitiesPackage;
import fi.tucs.entities.entities.Entity;
import fi.tucs.entities.entities.Field;
import fi.tucs.entities.entities.Model;
import fi.tucs.entities.entities.Statement;
import fi.tucs.entities.services.EntitiesGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class EntitiesFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EntitiesGrammarAccess _entitiesGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Entity> _entities = model.getEntities();
    for (final Entity entity : _entities) {
      document.<Entity>format(entity);
    }
  }
  
  protected void _format(final Entity entity, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).keyword("extends"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).feature(EntitiesPackage.Literals.ENTITY__NAME), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(entity).feature(EntitiesPackage.Literals.ENTITY__SUPER_TYPE), _function_2);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(entity).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(entity).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Field> _fields = entity.getFields();
    for (final Field field : _fields) {
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
      };
      document.<Field>append(field, _function_5);
    }
    EList<Statement> _statements = entity.getStatements();
    for (final Statement statement : _statements) {
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.setNewLines(1, 1, 2);
      };
      document.<Statement>append(statement, _function_6);
    }
  }
  
  public void format(final Object entity, final IFormattableDocument document) {
    if (entity instanceof XtextResource) {
      _format((XtextResource)entity, document);
      return;
    } else if (entity instanceof Entity) {
      _format((Entity)entity, document);
      return;
    } else if (entity instanceof Model) {
      _format((Model)entity, document);
      return;
    } else if (entity instanceof EObject) {
      _format((EObject)entity, document);
      return;
    } else if (entity == null) {
      _format((Void)null, document);
      return;
    } else if (entity != null) {
      _format(entity, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(entity, document).toString());
    }
  }
}
