/**
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.validation;

import com.google.inject.Inject;
import fi.tucs.entities.entities.AssignmentStatement;
import fi.tucs.entities.entities.EntitiesPackage;
import fi.tucs.entities.entities.Entity;
import fi.tucs.entities.typing.ExpressionTypeComputer;
import fi.tucs.entities.typing.Expression_Type;
import fi.tucs.entities.validation.AbstractEntitiesValidator;
import java.util.HashSet;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class EntitiesValidator extends AbstractEntitiesValidator {
  protected final static String ISSUE_CODE_PREFIX = "fi.tucs.entities.";
  
  public final static String HIERARCHY_CYCLE = (EntitiesValidator.ISSUE_CODE_PREFIX + "HierarchyCycle");
  
  public final static String INVALID_ENTITY_NAME = (EntitiesValidator.ISSUE_CODE_PREFIX + "InvalidEntityName");
  
  public final static String INVALID_FIELD_NAME_LOWERCASE = (EntitiesValidator.ISSUE_CODE_PREFIX + "InvalidFieldNameLowerCase");
  
  public final static String INVALID_BOOLEAN_FIELD_NAME = (EntitiesValidator.ISSUE_CODE_PREFIX + "InvalidBooleanFieldName");
  
  @Check
  public void fjsdkfjsdfklsd(final Entity entity) {
    Entity _superType = entity.getSuperType();
    boolean _tripleEquals = (_superType == null);
    if (_tripleEquals) {
      return;
    }
    final HashSet<Entity> visitedEntities = CollectionLiterals.<Entity>newHashSet(entity);
    Entity current = entity.getSuperType();
    while ((current != null)) {
      {
        boolean _contains = visitedEntities.contains(current);
        if (_contains) {
          String _name = current.getName();
          String _plus = ("Cycle in hierarchy of entity \'" + _name);
          String _plus_1 = (_plus + "\'");
          this.error(_plus_1, 
            EntitiesPackage.eINSTANCE.getEntity_SuperType(), 
            EntitiesValidator.HIERARCHY_CYCLE, 
            entity.getName());
          return;
        }
        visitedEntities.add(current);
        current = current.getSuperType();
      }
    }
  }
  
  @Check
  public void checkEntityNameStartsWithCapital(final Entity entity) {
    boolean _isLowerCase = Character.isLowerCase(entity.getName().charAt(0));
    if (_isLowerCase) {
      this.warning("Entity name should start with a capital", 
        EntitiesPackage.eINSTANCE.getEntity_Name(), 
        EntitiesValidator.INVALID_ENTITY_NAME, 
        entity.getName());
    }
  }
  
  @Inject
  @Extension
  private ExpressionTypeComputer fasfsjflksjflks;
  
  @Check
  public void fjsdklfsdfkljs(final AssignmentStatement x) {
    final Expression_Type left = this.fasfsjflksjflks.typeFor(x.getAssignee());
    final Expression_Type right = this.fasfsjflksjflks.typeFor(x.getExpr());
    if ((((right != null) && (left != null)) && (!right.equals(left)))) {
      this.error(((("Type mismatch: " + left) + " and ") + right), 
        EntitiesPackage.eINSTANCE.getAssignmentStatement_Assignee());
    }
  }
}
