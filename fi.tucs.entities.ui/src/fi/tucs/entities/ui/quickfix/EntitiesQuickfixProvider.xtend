/*
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import fi.tucs.entities.validation.EntitiesValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import fi.tucs.entities.entities.Entity
import org.eclipse.xtext.diagnostics.Diagnostic
import fi.tucs.entities.entities.Model
import fi.tucs.entities.entities.EntitiesFactory


import static extension org.eclipse.xtext.EcoreUtil2.*

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class EntitiesQuickfixProvider extends DefaultQuickfixProvider {
	
	@Fix(EntitiesValidator.INVALID_ENTITY_NAME)
	def void capitalizeEntityName(
		Issue issue,
		IssueResolutionAcceptor acceptor) {
	
		acceptor.accept(
			issue,
			"Capitalize first letter",
			"Capitalize first letter of ...",
			"",
			[
				element,
				context
				|
				(element as Entity).name = (element as Entity).name.toFirstUpper
			]
		)
			
	}
	

	@Fix(EntitiesValidator.HIERARCHY_CYCLE)
	def void removeSuperType(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			
			issue,
			"Remove supertype",
			"Remove supertype",
			"", // icon
			
//			new ISemanticModification() {
//				override apply(EObject element, IModificationContext context) {
//					(element as Entity).superType = null;
//				}
//			}

			[
				element,
				context
				|
				(element as Entity).superType = null;
			]
			
			
		)
	}
	
	
	@Fix(Diagnostic.LINKING_DIAGNOSTIC)
	def void createMissingEntity(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Create missing entity after current entity",
			"Create missing entity after current entity",
			"", // icon
			
			[
				element,
				context
				|
				val currentEntity = element.getContainerOfType(Entity) // import static extension org.eclipse.xtext.EcoreUtil2.*
				val model = currentEntity.eContainer as Model
				model.entities.add(
					model.entities.indexOf(currentEntity) + 1,
					EntitiesFactory.eINSTANCE.createEntity() =>
						[
							name = context.xtextDocument.get(
								issue.offset,
								issue.length
							)
						]
				)
			]
			
		)
	}



	
}
