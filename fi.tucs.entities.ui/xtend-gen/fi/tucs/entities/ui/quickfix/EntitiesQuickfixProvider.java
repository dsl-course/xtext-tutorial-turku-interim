/**
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.ui.quickfix;

import fi.tucs.entities.entities.EntitiesFactory;
import fi.tucs.entities.entities.Entity;
import fi.tucs.entities.entities.Model;
import fi.tucs.entities.validation.EntitiesValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.diagnostics.Diagnostic;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class EntitiesQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(EntitiesValidator.HIERARCHY_CYCLE)
  public void eqwueioquweioqwueioqweuqwo(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      ((Entity) element).setSuperType(null);
    };
    acceptor.accept(issue, 
      "Remove supertype", 
      "Remove supertype", 
      "", _function);
  }
  
  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
  public void dajskdajsdklsa(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      final Entity currentEntity = EcoreUtil2.<Entity>getContainerOfType(element, Entity.class);
      EObject _eContainer = currentEntity.eContainer();
      final Model model = ((Model) _eContainer);
      EList<Entity> _entities = model.getEntities();
      int _indexOf = model.getEntities().indexOf(currentEntity);
      int _plus = (_indexOf + 1);
      Entity _createEntity = EntitiesFactory.eINSTANCE.createEntity();
      final Procedure1<Entity> _function_1 = (Entity it) -> {
        try {
          it.setName(context.getXtextDocument().get(
            (issue.getOffset()).intValue(), 
            (issue.getLength()).intValue()));
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      };
      Entity _doubleArrow = ObjectExtensions.<Entity>operator_doubleArrow(_createEntity, _function_1);
      _entities.add(_plus, _doubleArrow);
    };
    acceptor.accept(issue, 
      "Create missing entity after current entity", 
      "Create missing entity after current entity", 
      "", _function);
  }
  
  @Fix(EntitiesValidator.INVALID_ENTITY_NAME)
  public void capitalizeEntityName(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = (EObject element, IModificationContext context) -> {
      ((Entity) element).setName(
        StringExtensions.toFirstUpper(((Entity) element).getName()));
    };
    acceptor.accept(issue, 
      "Capitalize first letter", 
      "Capitalize first letter of ...", 
      "", _function);
  }
}
