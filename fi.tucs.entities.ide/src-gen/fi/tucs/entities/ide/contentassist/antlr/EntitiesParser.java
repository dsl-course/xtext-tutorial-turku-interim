/*
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.ide.contentassist.antlr;

import com.google.inject.Inject;
import fi.tucs.entities.ide.contentassist.antlr.internal.InternalEntitiesParser;
import fi.tucs.entities.services.EntitiesGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class EntitiesParser extends AbstractContentAssistParser {

	@Inject
	private EntitiesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEntitiesParser createParser() {
		InternalEntitiesParser result = new InternalEntitiesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getExpressionAccess().getValueAlternatives_2_1_0(), "rule__Expression__ValueAlternatives_2_1_0");
					put(grammarAccess.getFieldTypeAccess().getAlternatives(), "rule__FieldType__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0(), "rule__BasicType__TypeNameAlternatives_0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getAssignmentStatementAccess().getGroup(), "rule__AssignmentStatement__Group__0");
					put(grammarAccess.getPrintStatementAccess().getGroup(), "rule__PrintStatement__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getModelAccess().getEntitiesAssignment(), "rule__Model__EntitiesAssignment");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getFieldsAssignment_4(), "rule__Entity__FieldsAssignment_4");
					put(grammarAccess.getEntityAccess().getStatementsAssignment_5(), "rule__Entity__StatementsAssignment_5");
					put(grammarAccess.getAssignmentStatementAccess().getAssigneeAssignment_0(), "rule__AssignmentStatement__AssigneeAssignment_0");
					put(grammarAccess.getAssignmentStatementAccess().getExprAssignment_2(), "rule__AssignmentStatement__ExprAssignment_2");
					put(grammarAccess.getPrintStatementAccess().getExprAssignment_1(), "rule__PrintStatement__ExprAssignment_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_0_1(), "rule__Expression__ValueAssignment_0_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_1_1(), "rule__Expression__ValueAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_2_1(), "rule__Expression__ValueAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getFieldAssignment_3_1(), "rule__Expression__FieldAssignment_3_1");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getBasicTypeAccess().getTypeNameAssignment(), "rule__BasicType__TypeNameAssignment");
					put(grammarAccess.getEntityTypeAccess().getEntityAssignment(), "rule__EntityType__EntityAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EntitiesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EntitiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
