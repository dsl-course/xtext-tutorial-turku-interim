/*
 * generated by Xtext 2.12.0
 */
grammar InternalEntities;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fi.tucs.entities.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fi.tucs.entities.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fi.tucs.entities.services.EntitiesGrammarAccess;

}
@parser::members {
	private EntitiesGrammarAccess grammarAccess;

	public void setGrammarAccess(EntitiesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getEntitiesAssignment()); }
		(rule__Model__EntitiesAssignment)*
		{ after(grammarAccess.getModelAccess().getEntitiesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getGroup()); }
		(rule__Entity__Group__0)
		{ after(grammarAccess.getEntityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleAssignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
		(rule__AssignmentStatement__Group__0)
		{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrintStatement
entryRulePrintStatement
:
{ before(grammarAccess.getPrintStatementRule()); }
	 rulePrintStatement
{ after(grammarAccess.getPrintStatementRule()); } 
	 EOF 
;

// Rule PrintStatement
rulePrintStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintStatementAccess().getGroup()); }
		(rule__PrintStatement__Group__0)
		{ after(grammarAccess.getPrintStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldType
entryRuleFieldType
:
{ before(grammarAccess.getFieldTypeRule()); }
	 ruleFieldType
{ after(grammarAccess.getFieldTypeRule()); } 
	 EOF 
;

// Rule FieldType
ruleFieldType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldTypeAccess().getAlternatives()); }
		(rule__FieldType__Alternatives)
		{ after(grammarAccess.getFieldTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicType
entryRuleBasicType
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameAssignment()); }
		(rule__BasicType__TypeNameAssignment)
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntityType
entryRuleEntityType
:
{ before(grammarAccess.getEntityTypeRule()); }
	 ruleEntityType
{ after(grammarAccess.getEntityTypeRule()); } 
	 EOF 
;

// Rule EntityType
ruleEntityType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityTypeAccess().getEntityAssignment()); }
		(rule__EntityType__EntityAssignment)
		{ after(grammarAccess.getEntityTypeAccess().getEntityAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_0()); }
		rulePrintStatement
		{ after(grammarAccess.getStatementAccess().getPrintStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_1()); }
		ruleAssignmentStatement
		{ after(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_0()); }
		(rule__Expression__Group_0__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
		(rule__Expression__Group_1__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_2()); }
		(rule__Expression__Group_2__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getGroup_3()); }
		(rule__Expression__Group_3__0)
		{ after(grammarAccess.getExpressionAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getValueOnKeyword_2_1_0_0()); }
		'on'
		{ after(grammarAccess.getExpressionAccess().getValueOnKeyword_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getValueOffKeyword_2_1_0_1()); }
		'off'
		{ after(grammarAccess.getExpressionAccess().getValueOffKeyword_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldTypeAccess().getBasicTypeParserRuleCall_0()); }
		ruleBasicType
		{ after(grammarAccess.getFieldTypeAccess().getBasicTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFieldTypeAccess().getEntityTypeParserRuleCall_1()); }
		ruleEntityType
		{ after(grammarAccess.getFieldTypeAccess().getEntityTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__TypeNameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameTextKeyword_0_0()); }
		'text'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameTextKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameNumberKeyword_0_1()); }
		'number'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameNumberKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameToggleKeyword_0_2()); }
		'toggle'
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameToggleKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
	'entity'
	{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getNameAssignment_1()); }
	(rule__Entity__NameAssignment_1)
	{ after(grammarAccess.getEntityAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getGroup_2()); }
	(rule__Entity__Group_2__0)?
	{ after(grammarAccess.getEntityAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getFieldsAssignment_4()); }
	(rule__Entity__FieldsAssignment_4)*
	{ after(grammarAccess.getEntityAccess().getFieldsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__5__Impl
	rule__Entity__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getStatementsAssignment_5()); }
	(rule__Entity__StatementsAssignment_5)*
	{ after(grammarAccess.getEntityAccess().getStatementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__0__Impl
	rule__Entity__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getEntityAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Entity__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
	(rule__Entity__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getAssigneeAssignment_0()); }
	(rule__AssignmentStatement__AssigneeAssignment_0)
	{ after(grammarAccess.getAssignmentStatementAccess().getAssigneeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentStatementAccess().getExprAssignment_2()); }
	(rule__AssignmentStatement__ExprAssignment_2)
	{ after(grammarAccess.getAssignmentStatementAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrintStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintStatement__Group__0__Impl
	rule__PrintStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintStatementAccess().getPrintKeyword_0()); }
	'print'
	{ after(grammarAccess.getPrintStatementAccess().getPrintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrintStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintStatementAccess().getExprAssignment_1()); }
	(rule__PrintStatement__ExprAssignment_1)
	{ after(grammarAccess.getPrintStatementAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__0__Impl
	rule__Expression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getIntConstantAction_0_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getIntConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValueAssignment_0_1()); }
	(rule__Expression__ValueAssignment_0_1)
	{ after(grammarAccess.getExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getStringConstantAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getStringConstantAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValueAssignment_1_1()); }
	(rule__Expression__ValueAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__0__Impl
	rule__Expression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getBoolConstantAction_2_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getBoolConstantAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getValueAssignment_2_1()); }
	(rule__Expression__ValueAssignment_2_1)
	{ after(grammarAccess.getExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_3__0__Impl
	rule__Expression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getFieldRefAction_3_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getFieldRefAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getFieldAssignment_3_1()); }
	(rule__Expression__FieldAssignment_3_1)
	{ after(grammarAccess.getExpressionAccess().getFieldAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getTypeAssignment_0()); }
	(rule__Field__TypeAssignment_0)
	{ after(grammarAccess.getFieldAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
	(rule__Field__NameAssignment_1)
	{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__EntitiesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0()); }
		ruleEntity
		{ after(grammarAccess.getModelAccess().getEntitiesEntityParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getEntityAccess().getSuperTypeEntityIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEntityAccess().getSuperTypeEntityIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__FieldsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_0()); }
		ruleField
		{ after(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__StatementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getStatementsStatementParserRuleCall_5_0()); }
		ruleStatement
		{ after(grammarAccess.getEntityAccess().getStatementsStatementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__AssigneeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getAssigneeFieldCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentStatementAccess().getAssigneeFieldIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentStatementAccess().getAssigneeFieldIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentStatementAccess().getAssigneeFieldCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentStatementAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentStatementAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrintStatement__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintStatementAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPrintStatementAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getValueAlternatives_2_1_0()); }
		(rule__Expression__ValueAlternatives_2_1_0)
		{ after(grammarAccess.getExpressionAccess().getValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__FieldAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getFieldFieldCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getFieldFieldIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpressionAccess().getFieldFieldIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getExpressionAccess().getFieldFieldCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_0_0()); }
		ruleFieldType
		{ after(grammarAccess.getFieldAccess().getTypeFieldTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__TypeNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0()); }
		(rule__BasicType__TypeNameAlternatives_0)
		{ after(grammarAccess.getBasicTypeAccess().getTypeNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EntityType__EntityAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityTypeAccess().getEntityEntityCrossReference_0()); }
		(
			{ before(grammarAccess.getEntityTypeAccess().getEntityEntityIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEntityTypeAccess().getEntityEntityIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getEntityTypeAccess().getEntityEntityCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
